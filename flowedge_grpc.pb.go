// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: flowedge.proto

package flowedge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlowEdgeService_Register_FullMethodName      = "/flowedge.FlowEdgeService/Register"
	FlowEdgeService_Heartbeat_FullMethodName     = "/flowedge.FlowEdgeService/Heartbeat"
	FlowEdgeService_CommandStream_FullMethodName = "/flowedge.FlowEdgeService/CommandStream"
)

// FlowEdgeServiceClient is the client API for FlowEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowEdgeServiceClient interface {
	Register(ctx context.Context, in *RegisterInfoRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	CommandStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandRequest, CommandResult], error)
}

type flowEdgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowEdgeServiceClient(cc grpc.ClientConnInterface) FlowEdgeServiceClient {
	return &flowEdgeServiceClient{cc}
}

func (c *flowEdgeServiceClient) Register(ctx context.Context, in *RegisterInfoRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, FlowEdgeService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowEdgeServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, FlowEdgeService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowEdgeServiceClient) CommandStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandRequest, CommandResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FlowEdgeService_ServiceDesc.Streams[0], FlowEdgeService_CommandStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequest, CommandResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlowEdgeService_CommandStreamClient = grpc.BidiStreamingClient[CommandRequest, CommandResult]

// FlowEdgeServiceServer is the server API for FlowEdgeService service.
// All implementations must embed UnimplementedFlowEdgeServiceServer
// for forward compatibility.
type FlowEdgeServiceServer interface {
	Register(context.Context, *RegisterInfoRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	CommandStream(grpc.BidiStreamingServer[CommandRequest, CommandResult]) error
	mustEmbedUnimplementedFlowEdgeServiceServer()
}

// UnimplementedFlowEdgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowEdgeServiceServer struct{}

func (UnimplementedFlowEdgeServiceServer) Register(context.Context, *RegisterInfoRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFlowEdgeServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFlowEdgeServiceServer) CommandStream(grpc.BidiStreamingServer[CommandRequest, CommandResult]) error {
	return status.Errorf(codes.Unimplemented, "method CommandStream not implemented")
}
func (UnimplementedFlowEdgeServiceServer) mustEmbedUnimplementedFlowEdgeServiceServer() {}
func (UnimplementedFlowEdgeServiceServer) testEmbeddedByValue()                         {}

// UnsafeFlowEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowEdgeServiceServer will
// result in compilation errors.
type UnsafeFlowEdgeServiceServer interface {
	mustEmbedUnimplementedFlowEdgeServiceServer()
}

func RegisterFlowEdgeServiceServer(s grpc.ServiceRegistrar, srv FlowEdgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlowEdgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlowEdgeService_ServiceDesc, srv)
}

func _FlowEdgeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowEdgeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowEdgeService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowEdgeServiceServer).Register(ctx, req.(*RegisterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowEdgeService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowEdgeServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowEdgeService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowEdgeServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowEdgeService_CommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowEdgeServiceServer).CommandStream(&grpc.GenericServerStream[CommandRequest, CommandResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlowEdgeService_CommandStreamServer = grpc.BidiStreamingServer[CommandRequest, CommandResult]

// FlowEdgeService_ServiceDesc is the grpc.ServiceDesc for FlowEdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowEdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowedge.FlowEdgeService",
	HandlerType: (*FlowEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FlowEdgeService_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _FlowEdgeService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandStream",
			Handler:       _FlowEdgeService_CommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "flowedge.proto",
}
